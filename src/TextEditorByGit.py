import tkinter as tk
from tkinter import constants as tkc
from tkinter import filedialog, messagebox, ttk
import os

# –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
BG_COLOR = "#1e1e1e" 
ACCENT_COLOR = "#FFA500"
TEXT_COLOR = "#ffffff"
BTN_HOVER = "#e67e00"
MENU_BG = "#2d2d2d"
PANEL_BG = "#2a2a2a"

class TextEditor:
    def __init__(self, root):
        self.root = root
        self.root.title("–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä")
        self.root.geometry("900x600")
        self.root.configure(bg=BG_COLOR)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.file_path = None
        self.font_family = tk.StringVar(value="Helvetica")
        self.font_size = tk.IntVar(value=12)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        self.create_menu()
        self.bind_shortcuts()

    def create_widgets(self):
        toolbar = tk.Frame(self.root, bg=PANEL_BG)
        toolbar.grid(row=0, sticky="ew", padx=5, pady=5)

        buttons = [
            ("üìÇ –û—Ç–∫—Ä—ã—Ç—å", self.open_file),
            ("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self.save_file),
            ("‚ú® –û—á–∏—Å—Ç–∏—Ç—å", self.clear_text),
            ("üìÅ –ù–æ–≤—ã–π", self.new_file),
            ("‚ùì –ü–æ–º–æ—â—å", self.show_help)
        ]

        for i, (text, command) in enumerate(buttons):
            btn = tk.Button(toolbar, text=text, command=command, bg=ACCENT_COLOR,
                            fg=TEXT_COLOR, activebackground=BTN_HOVER, relief=tkc.FLAT, padx=10, pady=5)
            btn.pack(side=tk.LEFT, padx=3)
            self.add_hover_effect(btn)

        font_frame = tk.Frame(toolbar, bg=PANEL_BG)
        font_frame.pack(side=tk.LEFT, padx=10)

        font_label = tk.Label(font_frame, text="–®—Ä–∏—Ñ—Ç:", bg=PANEL_BG, fg=TEXT_COLOR)
        font_label.pack(side=tk.LEFT)

        font_combo = ttk.Combobox(font_frame, textvariable=self.font_family, values=[
            "Arial", "Courier", "Helvetica", "Times New Roman", "Consolas"
        ], width=15, state='readonly')
        font_combo.pack(side=tk.LEFT, padx=5)
        font_combo.bind("<<ComboboxSelected>>", lambda e: self.change_font())

        size_label = tk.Label(font_frame, text="–†–∞–∑–º–µ—Ä:", bg=PANEL_BG, fg=TEXT_COLOR)
        size_label.pack(side=tk.LEFT)

        size_spin = tk.Spinbox(font_frame, from_=8, to=48, textvariable=self.font_size,
                               width=5, command=self.change_font, bg=BG_COLOR, fg=TEXT_COLOR)
        size_spin.pack(side=tk.LEFT, padx=5)

        self.text_area = tk.Text(self.root, wrap="word", undo=True, font=("Helvetica", 12),
                                 bg="#111111", fg=TEXT_COLOR, insertbackground=TEXT_COLOR,
                                 selectbackground="#444444", borderwidth=2, relief="sunken")
        self.text_area.grid(row=1, sticky="nsew", padx=10, pady=5)

        self.root.grid_rowconfigure(1, weight=1)
        self.root.grid_columnconfigure(0, weight=1)

    def create_menu(self):
        menu_bar = tk.Menu(self.root, bg=MENU_BG, fg=TEXT_COLOR)

        file_menu = tk.Menu(menu_bar, tearoff=0, bg=MENU_BG, fg=TEXT_COLOR)
        file_menu.add_command(label="–ù–æ–≤—ã–π (Ctrl+N)", command=self.new_file)
        file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å (Ctrl+O)", command=self.open_file)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å (Ctrl+S)", command=self.save_file)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        menu_bar.add_cascade(label="–§–∞–π–ª", menu=file_menu)

        edit_menu = tk.Menu(menu_bar, tearoff=0, bg=MENU_BG, fg=TEXT_COLOR)
        edit_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", command=self.clear_text)
        edit_menu.add_command(label="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë", command=self.select_all)
        menu_bar.add_cascade(label="–ü—Ä–∞–≤–∫–∞", menu=edit_menu)

        help_menu = tk.Menu(menu_bar, tearoff=0, bg=MENU_BG, fg=TEXT_COLOR)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
        menu_bar.add_cascade(label="–ü–æ–º–æ—â—å", menu=help_menu)

        self.root.config(menu=menu_bar)

    def bind_shortcuts(self):
        self.root.bind("<Control-n>", lambda e: self.new_file())
        self.root.bind("<Control-o>", lambda e: self.open_file())
        self.root.bind("<Control-s>", lambda e: self.save_file())
        self.root.bind("<Control-a>", lambda e: self.select_all())

    def add_hover_effect(self, widget):
        widget.bind("<Enter>", lambda e: widget.config(bg=BTN_HOVER))
        widget.bind("<Leave>", lambda e: widget.config(bg=ACCENT_COLOR))

    def new_file(self):
        if self.confirm_discard_changes():
            self.text_area.delete(1.0, tk.END)
            self.file_path = None
            self.root.title("–ë–µ–∑ –∏–º–µ–Ω–∏ - –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä")

    def open_file(self):
        path = filedialog.askopenfilename(filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")])
        if path:
            with open(path, "r", encoding="utf-8") as file:
                self.text_area.delete(1.0, tk.END)
                self.text_area.insert(tk.END, file.read())
            self.file_path = path
            self.root.title(f"{os.path.basename(path)} - –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä")

    def save_file(self):
        if not self.file_path:
            path = filedialog.asksaveasfilename(defaultextension=".txt",
                                                filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")])
            if not path:
                return
            self.file_path = path
            self.root.title(f"{os.path.basename(path)} - –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä")
        with open(self.file_path, "w", encoding="utf-8") as file:
            file.write(self.text_area.get(1.0, tk.END))

    def clear_text(self):
        if messagebox.askyesno("–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç?"):
            self.text_area.delete(1.0, tk.END)

    def select_all(self):
        self.text_area.tag_add("sel", "1.0", "end-1c")
        return "break"

    def change_font(self):
        family = self.font_family.get()
        size = self.font_size.get()
        self.text_area.config(font=(family, size))

    def show_help(self):
        messagebox.showinfo("–ü–æ–º–æ—â—å", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+O –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è, Ctrl+S –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, Ctrl+N –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")

    def show_about(self):
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", "–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä\n–°–æ–∑–¥–∞–Ω —Å ‚ù§Ô∏è –Ω–∞ Python –∏ Tkinter.")

    def confirm_discard_changes(self):
        if self.text_area.edit_modified():
            return messagebox.askyesno("–ù–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –û—Ç–º–µ–Ω–∏—Ç—å?")
        return True


if __name__ == "__main__":
    root = tk.Tk()
    app = TextEditor(root)
    root.mainloop()
